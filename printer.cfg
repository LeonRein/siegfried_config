[include printer_stepper.cfg]
[include printer_home.cfg]
[include printer_neopixel.cfg]
[include printer_fan.cfg]

#######################################
# Generic printer config
#######################################

[mcu]
canbus_uuid: 1e05bdbc057b

[mcu ebb]
canbus_uuid: 211082196b79

[printer]
kinematics: corexy
max_velocity: 500
max_accel: 15000
max_z_velocity: 200
max_z_accel: 1400

[save_variables]
filename: ~/klipper_variables.cfg

[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

#######################################
# Input shaper config
#######################################

[adxl345]
cs_pin: ebb:PB12
spi_software_sclk_pin: ebb:PB10
spi_software_mosi_pin: ebb:PB11
spi_software_miso_pin: ebb:PB2
axes_map: z,-y,x

[resonance_tester]
probe_points: 150, 150, 20
accel_chip: adxl345

[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 56.6
shaper_type_y = mzv
shaper_freq_y = 43.2

#######################################
# Bed config
#######################################

[quad_gantry_level]
gantry_corners:
	-60,-10
	360,370
points:
	25,25
	25,275
	275,275
	275,25
speed: 500
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.01
max_adjust: 10

[heater_bed]
heater_pin: PA1
sensor_type: Generic 3950
sensor_pin: PF3
control: pid
pid_kp = 90.164
pid_ki = 6.654
pid_kd = 247.612
min_temp: 0
max_temp: 120

[bed_mesh]
speed: 500
horizontal_move_z: 3
zero_reference_position: 150, 150
mesh_min: 10, 10
mesh_max: 290, 290
probe_count: 10, 10
adaptive_margin: 5
mesh_pps: 4, 4
algorithm: bicubic
bicubic_tension: 0.2
fade_start: 1
fade_end: 10

#######################################
# Probe config
#######################################

[probe]
pin: !ebb:PB9
x_offset: 0
y_offset: 0
z_offset: -0.45
speed: 20.0
samples: 1
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.0075
samples_tolerance_retries: 3

activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#######################################
# Extruder config
#######################################

[extruder]
step_pin: ebb:PD0
dir_pin: ebb:PD1
enable_pin: !ebb:PD2
microsteps: 16
rotation_distance: 21.582
gear_ratio: 50:10
nozzle_diameter: 0.4
filament_diameter: 1.750
pressure_advance: 0.034
max_extrude_only_distance: 200

heater_pin: ebb:PB13
sensor_type: MAX31865
sensor_pin: ebb:PA4
spi_bus: spi1
# rtd_nominal_r: 100
# rtd_reference_r: 430
# rtd_num_of_wires: 2
smooth_time: 0.1
control: pid
pid_Kp=33.044
pid_Ki=2.091
pid_Kd=128.129
min_temp: 10
max_temp: 280
# min_extrude_temp: 10


#######################################
# POWER config
#######################################

[gcode_macro POWER_OFF_PRINTER]
gcode:
    {action_call_remote_method("set_device_power", device="printer", state="off")}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

[idle_timeout]
timeout: 3600
gcode:
  M140 S0
  M104 S0
  M84
  M117 Turning off in 1m
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60


#######################################
# Behavior config
#######################################

[gcode_arcs]
resolution: 0.25

[exclude_object]

[pause_resume]

[display_status]

[respond]

#######################################
# Macros
#######################################

[gcode_macro DIABLE_STEPPER]
gcode:
	M84

[gcode_macro CENTER]
gcode:
    G0 X150 Y150 Z150 F24000

[gcode_macro PURGE_POSITION]
gcode:
    G90
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    M400

    {% if printer.toolhead.position.z|float < 5 %}
      G0 Z5 F6000
    {% endif %}

    G0 X30 Y310 Z5 F12000

[gcode_macro CLEAN_NOZZLE]
gcode:
    {% set counts = params.N|default("3")|int %}
    G90
    PURGE_POSITION

    {% if counts > 0 %}
        G0 X50 Z1.5
    
        {% for i in range(counts) %}
            G0 X90 F12000
            G0 X50 F12000
        {% endfor %}

    {% endif %}

    PURGE_POSITION

[gcode_macro PURGE_NOZZLE]
gcode:
    {% set target_extruder = params.EXTRUDER|int %}
    {% set purge_amount = params.E|default(10)|float %}
    {% set counts = params.N|default("3")|int %}
    
    G90
    {% if printer.extruder.target|float < 150 %}
      M104 S{150}
    {% endif %}

    PURGE_POSITION

    {% if printer.extruder.temperature|float < target_extruder %}
      M109 S{target_extruder}
    {% endif %}

    M83
    G0 E{purge_amount} F180
    G0 E-1 F900

    CLEAN_NOZZLE COUNTS={counts}

    G0 E1 F900
    G92 E0

[gcode_macro LOAD_NEW_FILAMENT]
gcode:
    {% set target_extruder = params.EXTRUDER|default(240)|int %}
    {% set purge_amount = params.E|default(100)|float %}
    {% set counts = params.N|default("3")|int %}

    _led_cleaning
    PURGE_NOZZLE EXTRUDER={target_extruder} E={purge_amount} N={counts}
    M104 S0
  

[gcode_macro PRINT_START]
gcode:
    # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("40")|int %}
    {% set purge_amount = params.E|default(30) %} # nozzle prime

    # set the heatsoak temperatur to the current chamber target or the one of the print file
    {% set heat_soak_target = target_chamber %}
    {% if printer["temperature_fan chamber"].target < heat_soak_target %}
        {% set heat_soak_target = printer["temperature_fan chamber"].target %}
    {% endif %}

    {% if heat_soak_target > 0 %}
        {action_respond_info("Heatsoak: active")}
    {% else %}
        {action_respond_info("Heatsoak: disabled")}
    {% endif %}
    
    # Start Heating the bed
    _led_heating                                        # Sets SB-leds to heating-mode
    SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={target_chamber}
    M140 S{target_bed+2}                                  # Sets the target temp for the bed

    # Start heating nozzle, if chamber is at temp
    {% if printer["temperature_fan chamber"].temperature >= heat_soak_target - 1 or heat_soak == false%}
        M104 S150
    {% endif %}

    # Homing and single QGL
    _led_homing           # Sets SB-leds to homing-mode
    G28                   # Full home (XYZ)
    G90                   # Absolut position
    PURGE_POSITION

    # Finish bed heating
    _led_heating
    M190 S{target_bed+2}                                  # Sets the target temp for the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed

    # Heatsoak
    {% if heat_soak_target > 0 %}
        M106 S255                                           # Turns on the PT-fan
        {action_respond_info("Heatsoak: %.1f c" % (heat_soak_target))}  # Displays info
        TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={heat_soak_target}   # Waits for chamber to reach desired temp
    {% endif %}

    # Heat Nozzle
    {action_respond_info("Hotend: 150c")}          # Displays info
    M109 S150                                    # Heats the nozzle to 150c

    #CLEANING
    _led_cleaning
    CLEAN_NOZZLE

    # Leveling
    {action_respond_info("QGL")}      # Displays info
    _led_leveling                   # Sets SB-leds to leveling-mode
    quad_gantry_level               # Levels the buildplate via QGL
    _led_homing
    G28 Z                           # Homes Z again after QGL

    # Bed meshing
    BED_MESH_CALIBRATE ADAPTIVE=1

    # Heat nozzle
    {action_respond_info("Hotend: %.1f c" % (target_extruder))}             # Displays info
    _led_heating                                                  # Sets SB-leds to heating-mode
    M106 S255                                                     # Turns on the PT-fan
    M104 S{target_extruder}                                       # Heats the nozzle to printing temp
    PURGE_POSITION
    
    # Purge
    _led_cleaning
    PURGE_NOZZLE EXTRUDER={target_extruder} E={purge_amount}

    # start print
    M107                                                          # Turns off partcooling fan
    _led_printing

[gcode_macro PRINT_END]
gcode:
    # Turn off bed, extruder
    M140 S0
    M104 S0
    SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target=40
    PARK
    _led_success
    # Disable steppers
    M84

[gcode_macro PARK]
gcode:
    ##### set defaults #####
    {% set x = params.X|default(280) %}
    {% set y = params.Y|default(280) %}
    {% set z = params.Z|default(100)|float %}
    {% set e = params.E|default(10) %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    M106 S0
    G91
    G1 E-{e} F2400
    G1 X-2 F12000
    G1 Z{z_safe} F12000
    G90
    G1 X{x} Y{y} F12000
    _led_standby

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(280) %}
    {% set y = params.Y|default(280) %}
    {% set z = params.Z|default(10)|float %}
    {% set e = params.E|default(10) %}
    ##### end of definitions #####
    M400
    _led_standby
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    BASE_PAUSE
    PARK X={x} Y={y} Z={z} E={e}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### set defaults #####
    {% set e = params.E|default(10) %}
    
    {% if printer.is_paused %}
        G91
        G1 E{e} F180
        G90
    {% endif %}
    _led_printing
    RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=1
    BASE_RESUME
    

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    # Turn off bed, extruder
    M400
    M140 S0
    M104 S0
    _led_failed
    {% if not printer.is_paused %}
        PARK
    {% endif %}
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    M84

[gcode_macro M600]
gcode:
  {% set default_x = printer.toolhead.axis_minimum.x + 20 %}
  {% set default_y = printer.toolhead.axis_minimum.y + 20 %}
  {% set default_e = 4 %}

  {% set x = params.X|default(default_x)|float %}
  {% set y = params.Y|default(default_y)|float %}
  {% set z = params.Z|default(20)|float %}
  {% set e = params.E|default(default_e)|float %}

  {% if printer.pause_resume.is_paused %}
    {action_respond_info("Already paused")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    PAUSE X={x} Y={y} Z={z} E={e}
  {% endif %}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 56.6
#*# shaper_type_y = mzv
#*# shaper_freq_y = 43.2
